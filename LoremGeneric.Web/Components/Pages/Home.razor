@page "/"
@using System.Text.Json
@using FightIpsum
@using FightIpsum.Endpoints.FightIpsum.Services
@inject IFightIpsumService generator
@rendermode InteractiveServer

@inject ILogger<Home> Logger

<PageTitle>JudoIpsum - Lorem Ipsum with judo-jujitsu techniques</PageTitle>

<FluentGridItem xs="4">
</FluentGridItem>

<FluentGridItem xs="4" Justify="JustifyContent.Center">
    <div class="card">
        <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" FormName="organization_create" novalidate>
            <DataAnnotationsValidator />
            <FluentValidationSummary />

            <FluentStack Orientation="Orientation.Vertical">
                <div>
                    <FluentNumberField @bind-Value="Model.Number" Min="1" Max="10" Label="number of paragraphs" />
                </div>
                <div>
                    <FluentRadioGroup Name="Size" @bind-Value="Model.Size" Label="Size">
                        <FluentRadio Value=@ParagraphSize.small>Small</FluentRadio>
                        <FluentRadio Value=@ParagraphSize.medium>Medium</FluentRadio>
                        <FluentRadio Value=@ParagraphSize.large>Large</FluentRadio>
                    </FluentRadioGroup>
                </div>
                <div>
                    <FluentSwitch id="technicsSwitch" @bind-Value=Model.Jujitsu Label="Add Jujitsu technics" onchange="changeTechnics()">
                        <span slot="checked-message">Jujitsu</span>
                        <span slot="unchecked-message">Judo</span>
                    </FluentSwitch>
                </div>
                <div style="text-align:center;width:100%;padding-top:10px;">
                    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" BackgroundColor="#000">Generate</FluentButton>
                </div>
            </FluentStack>
        </EditForm>
    </div>
</FluentGridItem>
<FluentGridItem xs="4">
</FluentGridItem>
<FluentGridItem xs="3">
</FluentGridItem>

<FluentGridItem xs="6" Justify="JustifyContent.Center">
    <div class="card">
        @if (Strings.Count() > 0)
        {
            <div id="generatedText">
                @foreach (string item in Strings)
                {
                    <p style="text-align:justify">
                        @item
                    </p>
                }
            </div>
            <div style="text-align:center;">
                <fluent-button type="button" appearance="outline" class="outline" onclick="copyToClipboard()">
                    Outline Copy to clipboard
                </fluent-button>
            </div>
        }
    </div>
</FluentGridItem>
<FluentGridItem xs="3">
</FluentGridItem>

<script type="text/javascript">
    function changeTechnics() {
        var el2 = document.getElementById("technicsSwitch");
        var k = document.getElementById("kanji");

        if (el2.classList.contains("checked")) {
            k.src = "/images/judo-kanji-nb-min.png";
        }
        else {
            k.src = "/images/jujitsu-kanji-nb-min.png";
        }
    }

    function copyToClipboard() {
        let text = document.getElementById("generatedText").innerText;
        navigator.clipboard.writeText(text).then(
            () => {
                console.log("Successfully copied to clipboard !");
            },
            () => {
                console.log("Cannot use your clipboard !");
            },
        );
    }
</script>

@code {
    [SupplyParameterFromForm]
    private CreateItem Model { get; set; } = new();

    public IEnumerable<string> Strings = Enumerable.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        // shouldRender = true;
    }

    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

        Strings = generator.GenerateLorem(Model.Number, Model.Size, false, Model.Jujitsu);
    }

    public class CreateItem
    {
        public int Number { get; set; } = 2;
        public ParagraphSize Size { get; set; } = ParagraphSize.medium;
        public bool Jujitsu { get; set; }
    }
}
