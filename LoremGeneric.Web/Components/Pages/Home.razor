@page "/"
@using System.Text.Json
@using FightIpsum
@using FightIpsum.Endpoints.FightIpsum.Services
@inject IFightIpsumService generator
@rendermode InteractiveServer

@inject ILogger<Home> Logger

<PageTitle>Fight Ipsum</PageTitle>

<FluentGridItem xs="4">
</FluentGridItem>

<FluentGridItem xs="4">
    <div class="card">
        <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" FormName="organization_create" novalidate>
            <DataAnnotationsValidator />
            <FluentValidationSummary />

            <FluentStack Orientation="Orientation.Vertical">
                <div>
                    <FluentNumberField @bind-Value="Model.Number" Label="# Paragraph" />
                </div>
                <div>
                    <FluentRadioGroup Name="Size" @bind-Value="Model.Size" Label="Size">
                        <FluentRadio Value=@ParagraphSize.small>Small</FluentRadio>
                        <FluentRadio Value=@ParagraphSize.medium>Medium</FluentRadio>
                        <FluentRadio Value=@ParagraphSize.large>Large</FluentRadio>
                    </FluentRadioGroup>
                </div>
                <div>
                    <FluentSwitch @bind-Value=Model.Japanese Label="Use japanese">
                        <span slot="checked-message">Japanese</span>
                        <span slot="unchecked-message">English</span>
                    </FluentSwitch>
                </div>
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Generate</FluentButton>
            </FluentStack>
        </EditForm>
    </div>
</FluentGridItem>
<FluentGridItem xs="4">
</FluentGridItem>
<FluentGridItem xs="3">
</FluentGridItem>

<FluentGridItem xs="6">
    <div class="card">

        <div id="generatedText">
            @foreach (string item in Strings)
            {
                <p>
                    @item
                </p>
            }
        </div>

        <button type="button" class="btn btn-danger m-1" onclick="changeKanji()">
            Kanji
        </button>
        <fluent-button type="button" appearance="outline" class="outline" onclick="copyToClipboard()">
            Outline Copy to clipboard
        </fluent-button>
        <script>
            function copyToClipboard() {
                let text = document.getElementById("generatedText").innerText;
                navigator.clipboard.writeText(text).then(
                    () => {
                        /* clipboard successfully set */
                        console.log("success");
                    },
                    () => {
                        /* clipboard write failed */
                        console.log("failure");
                    },
                );
            }

            function copyToClipboard2() {
                try {
                    let text = document.getElementById("generatedText").innerText;
                    navigator.clipboard.writeText(text);
                }
                catch (error) {
                    console.log("cannot use your clipboard");
                }
            }

            function changeKanji() {
                var k = document.getElementById("kanji");
                console.log(k.src);
                if (k.src.endsWith("jujitsu-kanji.png")) {
                    k.src = "/images/judo-kanji.png";
                }
                else {
                    k.src = "/images/jujitsu-kanji.png";
                }
            }
        </script>
    </div>
</FluentGridItem>
<FluentGridItem xs="3">
</FluentGridItem>


@code {
    [SupplyParameterFromForm]
    private CreateItem Model { get; set; } = new();

    [Parameter]
    public EventCallback<string> OnKanjiChanged { get; set; }

    public IEnumerable<string> Strings = Enumerable.Empty<string>();

    protected override async Task OnInitializedAsync()
    {
        // shouldRender = true;
    }

    private async Task HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

        Strings = generator.GenerateLorem(Model.Number, Model.Size, false, Model.Japanese);
    }

    protected async Task Delete_Click()
    {
        await OnKanjiChanged.InvokeAsync(DateTime.Now.ToString());
        //NavigationManager.NavigateTo("/", true);
    }

    public class CreateItem
    {
        public int Number { get; set; } = 2;
        public ParagraphSize Size { get; set; } = ParagraphSize.medium;
        public bool Japanese { get; set; }
    }
}
